// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:iflutter_trip/model/task_entity.dart';
import 'package:iflutter_trip/generated/json/task_entity_helper.dart';
import 'package:iflutter_trip/model/home_entity.dart';
import 'package:iflutter_trip/generated/json/home_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case TaskEntity:
				return taskEntityFromJson(data as TaskEntity, json) as T;
			case HomeEntity:
				return homeEntityFromJson(data as HomeEntity, json) as T;
			case HomeConfig:
				return homeConfigFromJson(data as HomeConfig, json) as T;
			case HomeCommon:
				return homeCommonFromJson(data as HomeCommon, json) as T;
			case HomeGridNav:
				return homeGridNavFromJson(data as HomeGridNav, json) as T;
			case HomeGridNavItem:
				return homeGridNavItemFromJson(data as HomeGridNavItem, json) as T;
			case HomeSalesBox:
				return homeSalesBoxFromJson(data as HomeSalesBox, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case TaskEntity:
				return taskEntityToJson(data as TaskEntity);
			case HomeEntity:
				return homeEntityToJson(data as HomeEntity);
			case HomeConfig:
				return homeConfigToJson(data as HomeConfig);
			case HomeCommon:
				return homeCommonToJson(data as HomeCommon);
			case HomeGridNav:
				return homeGridNavToJson(data as HomeGridNav);
			case HomeGridNavItem:
				return homeGridNavItemToJson(data as HomeGridNavItem);
			case HomeSalesBox:
				return homeSalesBoxToJson(data as HomeSalesBox);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (TaskEntity).toString()){
			return TaskEntity().fromJson(json);
		}
		if(type == (HomeEntity).toString()){
			return HomeEntity().fromJson(json);
		}
		if(type == (HomeConfig).toString()){
			return HomeConfig().fromJson(json);
		}
		if(type == (HomeCommon).toString()){
			return HomeCommon().fromJson(json);
		}
		if(type == (HomeGridNav).toString()){
			return HomeGridNav().fromJson(json);
		}
		if(type == (HomeGridNavItem).toString()){
			return HomeGridNavItem().fromJson(json);
		}
		if(type == (HomeSalesBox).toString()){
			return HomeSalesBox().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<TaskEntity>[] is M){
			return data.map<TaskEntity>((e) => TaskEntity().fromJson(e)).toList() as M;
		}
		if(<HomeEntity>[] is M){
			return data.map<HomeEntity>((e) => HomeEntity().fromJson(e)).toList() as M;
		}
		if(<HomeConfig>[] is M){
			return data.map<HomeConfig>((e) => HomeConfig().fromJson(e)).toList() as M;
		}
		if(<HomeCommon>[] is M){
			return data.map<HomeCommon>((e) => HomeCommon().fromJson(e)).toList() as M;
		}
		if(<HomeGridNav>[] is M){
			return data.map<HomeGridNav>((e) => HomeGridNav().fromJson(e)).toList() as M;
		}
		if(<HomeGridNavItem>[] is M){
			return data.map<HomeGridNavItem>((e) => HomeGridNavItem().fromJson(e)).toList() as M;
		}
		if(<HomeSalesBox>[] is M){
			return data.map<HomeSalesBox>((e) => HomeSalesBox().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}